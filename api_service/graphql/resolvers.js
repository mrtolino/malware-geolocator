const sequelize = require('sequelize');
const Op = sequelize.Op;

module.exports = {
  MalwareData: {
    id: (parent, args, context) => {
      return parent.id;
    },
    date: (parent, args, context) => {
      return parent.date;
    },
    ip: (parent, args, context) => {
      return parent.ip;
    },
    description: (parent, args, context) => {
      return parent.description;
    },
    domain: (parent, args, context) => {
      return parent.domain;
    },
    asn: (parent, args, context) => {
      return parent.asn;
    },
    country: (parent, args, context) => {
      return parent.country;
    },
    registrant: (parent, args, context) => {
      return parent.registrant;
    },
    reverse_lookup: (parent, args, context) => {
      return parent.reverse_lookup;
    },
    createdAt: (parent, args, context) => {
      return parent.createdAt;
    },
    updatedAt: (parent, args, context) => {
      return parent.updatedAt;
    }
  },

  Query: {
    getData: async (parent, args, context) => {
      const models = context.models;
      let result = null;

      if (!args.first) {
        result = await models.MalwareData.findAll({});
      } else {
        if (args.offset <= 0) {
          result = await models.MalwareData.findAll({
            limit: args.first
          });
        } else {
          result = await models.MalwareData.findAll({
            limit: args.first,
            offset: args.offset
          });
        }
      }

      return result ? result : null;
    },
    search: async (parent, args, context) => {
      const models = context.models;
      const searchValue = args.searchValue.toString();

      const result = await models.MalwareData.findAll({
        where: {
          [Op.or]: [{description: searchValue}, {ip: searchValue}]
        }
      });

      return result ? result : null;
    }
  },

  Mutation: {
    insert: async (parent, args, context) => {
      const models = context.models;

      const result = await models.MalwareData.create({
        date: args.date,
        ip: args.ip,
        description: args.description,
        domain: args.domain,
        asn: args.asn,
        country: args.country,
        registrant: args.registrant,
        reverse_lookup: args.reverse_lookup
      });

      return result ? result : null;
    }
  }
};
