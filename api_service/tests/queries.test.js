const axios = require('axios');

describe('valid query testing', () => {
  test('searchQuery', async () => {
    const response = await axios.post('http://localhost:3000/graphql', {
      query: `
        query {
          search(searchValue: "trojan", sortBy: "date", order: "desc", first: 10, offset: 0) {
            id,
          }
        }
      `
    });

    const { data } = response;
    expect(data).toMatchObject(
      {
        "data": {
          "search": [
            {
              "id": 855
            },
            {
              "id": 427
            },
            {
              "id": 459
            },
            {
              "id": 614
            },
            {
              "id": 315
            },
            {
              "id": 79
            },
            {
              "id": 519
            },
            {
              "id": 575
            },
            {
              "id": 681
            },
            {
              "id": 702
            }
          ]
        }
      }
    )
  });

  test('searchQuery with empty string search value', async () => {
    const response = await axios.post('http://localhost:3000/graphql', {
      query: `
        query {
          search(searchValue: "", sortBy: "id", order: "asc", first: 10, offset: 0) {
            id,
          }
        }
      `
    });

    const { data } = response;
    expect(data).toMatchObject(
      {
        "data": {
          "search": [
            {
              "id": 1
            },
            {
              "id": 2
            },
            {
              "id": 3
            },
            {
              "id": 4
            },
            {
              "id": 5
            },
            {
              "id": 6
            },
            {
              "id": 7
            },
            {
              "id": 8
            },
            {
              "id": 9
            },
            {
              "id": 10
            }
          ]
        }
      }
    )
  });

  test('countQuery with search value trojan', async () => {
    const response = await axios.post('http://localhost:3000/graphql', {
      query: `
        query {
          totalCount(searchValue: "trojan")
        }
      `
    });

    const { data } = response;
    expect(data).toMatchObject(
      {
        "data": {
          "totalCount": 391
        }
      }
    );
  });

  test('countQuery with empty string search value', async () => {
    const response = await axios.post('http://localhost:3000/graphql', {
      query: `
        query {
          totalCount(searchValue: "")
        }
      `
    });

    const { data } = response;
    expect(data).toMatchObject(
      {
        "data": {
          "totalCount": 1012
        }
      }
    );
  });
});

const errorSearchQuery = async () => {
  return await axios.post('http://localhost:3000/graphql', {
    query: `
      query {
        search(sortBy: "id", order: "asc", first: 10, offset: 0) {
          id,
        }
      }
    `
  });
}

const errorCountQuery = async () => {
  return await axios.post('http://localhost:3000/graphql', {
    query: `
      query {
        totalCount
      }
    `
  });
};

describe('error query testing', () => {
  test('searchQuery with no search string should throw an error', async () => {
    await expect(errorSearchQuery())
    .rejects
    .toThrow();
  });

  test('countQuery with no search string param should throw an error', async () => {
    await expect(errorCountQuery())
    .rejects
    .toThrow();
  });
});
