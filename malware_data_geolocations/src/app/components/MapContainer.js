import {
  Map,
  InfoWindow,
  Marker,
  GoogleApiWrapper,
} from 'google-maps-react';
import isEqual from 'lodash/isequal';
import PropTypes from 'prop-types';
import React from 'react';
import { ROWS_PER_PAGE } from './DataController';

const SYMBOL_PATH = 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z';

class MapContainer extends React.Component {
  static getDerivedStateFromProps(nextProps, prevState) {
    let showingInfoWindow = false;
    nextProps.selectedLocations.forEach((location) => {
      if (location.coords === prevState.selectedPlace.position) {
        showingInfoWindow = true;
      }
    });
    if (!showingInfoWindow && prevState.showingInfoWindow) {
      return {
        showingInfoWindow: false,
        activeMarker: {},
        selectedPlace: {},
      };
    }
    return null;
  }

  constructor(props) {
    super(props);

    this.state = {
      showingInfoWindow: false,
      activeMarker: {},
      selectedPlace: {},
    };

    this.onMarkerClick = this.onMarkerClick.bind(this);
    this.onMapClicked = this.onMapClicked.bind(this);
    this.renderMarkers = this.renderMarkers.bind(this);
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (isEqual(nextProps.selectedLocations, this.props.selectedLocations) &&
        isEqual(nextProps.data, this.props.data) &&
        isEqual(nextState.activeMarker, this.state.activeMarker)) {
      return false;
    }
    return true;
  }

  onMarkerClick(props, marker) {
    this.setState({
      selectedPlace: props,
      activeMarker: marker,
      showingInfoWindow: true,
    });
  }

  onMapClicked() {
    if (this.state.showingInfoWindow) {
      this.setState({
        showingInfoWindow: false,
        activeMarker: null,
      });
    }
  }

  renderMarkers() {
    if (this.props.selectedLocations.length > 0) {
      return this.props.selectedLocations.map(location => (
        <Marker
          key={location.index}
          position={location.coords}
          label={{
            text: `${(location.index)}`,
            color: '#FFF',
          }}
          icon={{
            path: SYMBOL_PATH,
            fillColor: '#e51010',
            strokeColor: '#FFF',
            textColor: '#FFF',
            fillOpacity: 1,
            labelOrigin: new this.props.google.maps.Point(0, -30),
          }}
          city={location.city}
          country={location.country}
          ipType={location.ipType}
          onClick={this.onMarkerClick}
        />
      ));
    }
    return this.props.data.map((data, index) => (
      <Marker
        key={data.info.id}
        position={{ lat: data.location.lat, lng: data.location.lng }}
        label={{
              text: `${data.info.id}`,
              color: '#FFF',
            }}
        icon={{
              path: SYMBOL_PATH,
              fillColor: '#e51010',
              strokeColor: '#FFF',
              textColor: '#FFF',
              fillOpacity: 1,
              labelOrigin: new this.props.google.maps.Point(0, -30),
            }}
        city={data.location.city}
        country={data.location.country}
        ipType={data.location.ipType}
        onClick={this.onMarkerClick}
      />
    ));
  }

  render() {
    return (
      <div id="mapDiv" className="row">
        <Map
          google={this.props.google}
          style={{ width: '80.5%', height: '400px', borderRadius: '10px' }}
          initialCenter={{
            lat: 10,
            lng: 10,
          }}
          zoom={2}
          onClick={this.onMapClicked}
        >
          {this.renderMarkers()}
          <InfoWindow
            marker={this.state.activeMarker}
            visible={this.state.showingInfoWindow}
          >
            <div>
              <h6>City: {this.state.selectedPlace.city}</h6>
              <h6>Country: {this.state.selectedPlace.country}</h6>
              <h6>IP Type: {this.state.selectedPlace.ipType}</h6>
            </div>
          </InfoWindow>
        </Map>
      </div>
    );
  }
}

MapContainer.propTypes = {
  currentPage: PropTypes.number.isRequired,
  data: PropTypes.array.isRequired,
  selectedLocations: PropTypes.array.isRequired,
};

export default GoogleApiWrapper({
  apiKey: 'AIzaSyB28H06flDqZhZhiL8iiL4vIZzY46o6P9Y',
})(MapContainer);
