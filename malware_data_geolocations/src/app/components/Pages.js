import React from 'react';

class Pages extends React.Component {
  constructor(props) {
    super(props);

    this.handlePageClick = this.handlePageClick.bind(this);
  }

  // TODO: Write unit tests for this function
  handlePageClick(e) {
    // Ensures that only page element clicks run this function - not clicks anywhere within the borders of the ul element
    if (e.target.className !== 'page-link') {
      return;
    }

    const searchString = window.location.search.split('&')[1];
    let newQueryString = '';

    //default value for nextPage
    let nextPage = 1;

    if (e.target.parentNode.value === 0 && this.props.currentPage !== this.props.pageLimit) {
      nextPage = this.props.currentPage + 1;
    } else if (e.target.parentNode.value === -1 && this.props.currentPage > 1) {
      nextPage = this.props.currentPage - 1;
    } else if (e.target.parentNode.value !== -1 && e.target.parentNode.value !== 0 ) {
      nextPage = e.target.parentNode.value;
    }

    if (searchString) {
      newQueryString = `${window.location.pathname}?page=${nextPage}&${searchString}`;
    } else {
      newQueryString = `${window.location.pathname}?page=${nextPage}`;
    }

    this.props.onPageClick(e, this.props.currentPage, nextPage);
    window.history.replaceState(null, null, newQueryString);
  }

  renderListOfPages() {
    let list = [];

    for (let index = 0; index < this.props.pageLimit; index++) {
      if (index === this.props.currentPage-1) {
        list.push(<li className="page-num page-item active" key={index+1} value={index+1}><a className="page-link">{index+1}</a></li>);
      } else {
        list.push(<li className="page-num page-item" key={index+1} value={index+1}><a className="page-link">{index+1}</a></li>);
      }
    }
    return list;
  }

  isDisabledPrev() {
    if (this.props.currentPage === 1) {
      return ' disabled';
    } else {
      return '';
    }
  }

  isDisabledNext() {
    if (this.props.currentPage === this.props.pageLimit) {
      return ' disabled';
    } else {
      return '';
    }
  }

  render() {
    return (
    <ul className="row pagination justify-content-center justify-content-md-start row-margin-top-20" onClick={this.handlePageClick}>
      <li className={`page-item${this.isDisabledPrev()}`} value={-1}><a className="page-link">Previous</a></li>
      {this.renderListOfPages()}
      <li className={`page-item${this.isDisabledNext()}`} value={0}><a className="page-link">Next</a></li>
    </ul>
    );
  }
}

export default Pages;
