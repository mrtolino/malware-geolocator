import _ from 'lodash';
import gql from 'graphql-tag';
import { GridLoader } from 'react-spinners';
import { parse } from 'qs';
import React from 'react';
import ReactPaginate from 'react-paginate';
import { withApollo } from 'react-apollo';

import DataGrid from './DataGrid';
import MapContainer from './MapContainer';
import { malwareData } from '../../assets/malware_data';
import Search from './Search';

const ROWS_PER_PAGE = 100, DEBOUNCE_RATE = 1000;

class DataController extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      selectedLocations: [],
      totalDataCount: 0,
      loading: true,
    };

    this.onSelectLocation = this.onSelectLocation.bind(this);
    this.onSearchSubmit = _.debounce(this.onSearchSubmit.bind(this), DEBOUNCE_RATE);
    this.onPageClick = this.onPageClick.bind(this);
    this.getPageLimit = this.getPageLimit.bind(this);
    this.onGridHeaderClick = this.onGridHeaderClick.bind(this);
    this.setSearchValue = this.setSearchValue.bind(this);
  }

  componentDidMount() {
    if (!this.getCurrentPage() || this.getCurrentPage() === 'undefined') {
      this.setCurrentPage(1);
    }
    if (!this.getSortBy() || this.getSortBy() === 'undefined') {
      this.setSortBy('date');
    }
    if (!this.getOrd() || this.getOrd() === 'undefined') {
      this.setOrd('asc');
    }

    // get data
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE,
        offset: (parseInt(this.getCurrentPage() || 1) - 1) * ROWS_PER_PAGE
      }
    })
    .then((response) => {
      let locations = [];
      let count;

      if (response.data.search && response.data.search.length > 0) {
        count = response.data.search.length;

        response.data.search.map(data => {
          fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
          .then(response => response.json())
          .then(json => {
            locations = [
              ...locations,
              {
                lat: json.lat,
                lng: json.lon,
                city: json.city,
                country: json.country,
                ipType: json.ipType
              }
            ];
            count--;
            if (count === 0) {
              this.setState({
                data: response.data.search.map((data, index) => (
                  {
                    selected: false,
                    info: data,
                    location: locations[index],
                  }
                ))
              });
            }
          })
        });

        // get total data count
        this.props.client.query({
          query: gql`
            query GetCount($searchValue: String!) {
              totalCount(searchValue: $searchValue)
            }
          `,
          variables: {
            searchValue: this.getSearchValue()
          }
        })
        .then(response => {
          this.setState({
            totalDataCount: response.data.totalCount,
            loading: false,
          })
        });
      } else {
        this.setState({
          data: [],
          selectedLocations: [],
          totalDataCount: 0,
          loading: false,
        });
      }
    });
  }

  onPageClick(nextPage) {
    // pull page value out of object and convert to 1-based indexing
    nextPage = nextPage.selected+1;

    this.setCurrentPage(nextPage);

    this.setState({
      loading: true
    });

    // get data using offset
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE,
        offset: (nextPage - 1) * ROWS_PER_PAGE
      }
    })
    .then(response => {
      let locations = [];
      let count;

      if (response.data.search && response.data.search.length > 0) {
        count = response.data.search.length;
        response.data.search.map(data => {
          fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
          .then(response => response.json())
          .then(json => {
            locations = [
              ...locations,
              {
                lat: json.lat,
                lng: json.lon,
                city: json.city,
                country: json.country,
                ipType: json.ipType
              }
            ];
            count--;
            if (count === 0) {
              this.setState({
                data: response.data.search.map((data, index) => (
                  {
                    selected: false,
                    info: data,
                    location: locations[index]
                  }
                )),
                selectedLocations: [],
                loading: false,
              });
            }
          })
        });
      } else {
        this.setState({
          data: [],
          selectedLocations: [],
          totalDataCount: 0,
          loading: false,
        });
      }
    });
  }

  sortData() {
    this.setState({
      loading: true
    });

    // get data
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE,
        offset: (parseInt(this.getCurrentPage() || 1) - 1) * ROWS_PER_PAGE
      }
    })
    .then((response) => {
      let locations = [];
      let count;

      if (response.data.search && response.data.search.length > 0) {
        count = response.data.search.length;

        response.data.search.map(data => {
          fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
          .then(response => response.json())
          .then(json => {
            locations = [
              ...locations,
              {
                lat: json.lat,
                lng: json.lon,
                city: json.city,
                country: json.country,
                ipType: json.ipType
              }
            ];
            count--;
            if (count === 0) {
              this.setState({
                data: response.data.search.map((data, index) => (
                  {
                    selected: false,
                    info: data,
                    location: locations[index],
                  }
                )),
                loading: false,
              });
            }
          })
        });
      } else {
        this.setState({
          data: [],
          selectedLocations: [],
          totalDataCount: 0,
          loading: false,
        });
      }
    });
  }

  setOrderingBy(col) {
    if (this.getSortBy() === col) {
      if (this.getOrd() === 'asc') {
        this.setOrd('desc');
      } else {
        this.setOrd('asc');
      }
    } else {
      this.setSortBy(col);
    }
  }

  onGridHeaderClick(col) {
    switch(col) {
      case 'date':
        this.setOrderingBy('date');
        break;
      case 'ip':
        this.setOrderingBy('ip');
        break;
      case 'description':
        this.setOrderingBy('description');
        break;
      case 'domain':
        this.setOrderingBy('domain');
        break;
      case 'asn':
        this.setOrderingBy('asn');
        break;
      case 'registrant':
        this.setOrderingBy('registrant');
        break;
      case 'revlookup':
        this.setOrderingBy('reverse_lookup');
        break;
      case 'country':
        this.setOrderingBy('country');
        break;
      default:
        break;
    }

    // call sortData to query API and retrieve sorted dataset
    this.sortData();
  }

  onSearchSubmit(searchValue) {
    this.setCurrentPage(1);

    this.setState({
      loading: true
    });

    // get data using search value
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: searchValue,
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE
      }
    })
    .then(response => {
      let locations = [];
      let count;

      if (response.data.search && response.data.search.length > 0) {
        count = response.data.search.length;

        response.data.search.map(data => {
          fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
          .then(response => response.json())
          .then(json => {
            locations = [
              ...locations,
              {
                lat: json.lat,
                lng: json.lon,
                city: json.city,
                country: json.country,
                ipType: json.ipType
              }
            ];
            count--;
            if (count === 0) {
              this.setState({
                data: response.data.search.map((data, index) => (
                  {
                    selected: false,
                    info: data,
                    location: locations[index]
                  }
                )),
                selectedLocations: [],
              });
            }
          })
        });

        // get total data count using search value
        this.props.client.query({
          query: gql`
            query GetCount($searchValue: String!) {
              totalCount(searchValue: $searchValue)
            }
          `,
          variables: {
            searchValue: searchValue
          }
        })
        .then(response => {
          this.setState({
            totalDataCount: response.data.totalCount,
            loading: false,
          });
        });
      } else {
        this.setState({
          data: [],
          selectedLocations: [],
          totalDataCount: 0,
          loading: false
        });
      }
    });
  }

  //TODO: Unit test this function
  onSelectLocation(index) {
    const selected = !this.state.data[index].selected;
    let selectedLocations = [];

    if (selected) {
      selectedLocations = [
        ...this.state.selectedLocations,
        {
          index: (index+1) + ((this.getCurrentPage() || 1) - 1) * ROWS_PER_PAGE,
          coords: {
            lat: this.state.data[index].location.lat,
            lng: this.state.data[index].location.lng
          },
          city: this.state.data[index].location.city,
          country: this.state.data[index].location.country,
          ipType: this.state.data[index].location.ipType
        }
      ];
    } else {
      selectedLocations = this.state.selectedLocations.filter(location => {
        return location.coords.lat !== this.state.data[index].location.lat && location.coords.lng !== this.state.data[index].location.lng;
      });
    }

    this.setState({
      data: this.state.data.map((data, i) => (
        {...data, selected: i === index ? selected : data.selected}
      )),
      selectedLocations: selectedLocations
    });
  }

  getPageLimit() {
    return this.state.totalDataCount ? Math.ceil(this.state.totalDataCount/ROWS_PER_PAGE) : 1;
  }

  getCurrentPage() {
    return parseInt(parse(window.location.search.replace('?', '')).page);
  }

  setCurrentPage(page) {
    const searchValue = this.getSearchValue();
    const sortBy = this.getSortBy();
    const ord = this.getOrd();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
    }
  }

  getSearchValue() {
    let searchValue = parse(window.location.search.replace('?', '')).search;
    return searchValue ? searchValue : '';
  }

  setSearchValue(searchValue) {
    const page = this.getCurrentPage();
    const sortBy = this.getSortBy();
    const ord = this.getOrd();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
    }
  }

  getSortBy() {
    return parse(window.location.search.replace('?', '')).sortBy;
  }

  setSortBy(sortBy) {
    const page = this.getCurrentPage();
    const searchValue = this.getSearchValue();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=asc&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=asc`);
    }
  }

  getOrd() {
    return parse(window.location.search.replace('?', '')).ord;
  }

  setOrd(ord) {
    const page = this.getCurrentPage();
    const sortBy = this.getSortBy();
    const searchValue = this.getSearchValue();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
    }
  }

  render() {
    return (
      <div>
        <MapContainer
          currentPage={this.getCurrentPage() || 1}
          data={this.state.data}
          selectedLocations={this.state.selectedLocations}
        />
        <ReactPaginate
          containerClassName="row pagination justify-content-center justify-content-md-start row-margin-top-20"
          pageClassName="page-item"
          pageLinkClassName="page-link"
          previousClassName="page-link"
          nextClassName="page-link"
          activeClassName="active"
          disabledClassName="disabled"
          breakClassName="page-link"
          breakLabel="..."
          pageCount={this.getPageLimit()}
          pageRangeDisplayed={3}
          marginPagesDisplayed={3}
          initialPage={(this.getCurrentPage() || 1) - 1}
          forcePage={(this.getCurrentPage() || 1) - 1}
          onPageChange={this.onPageClick} />
        <Search
          setSearchValue={this.setSearchValue}
          onSearchSubmit={this.onSearchSubmit} />
        <div id="spinner" className="row justify-content-center">
          <GridLoader
              color={'#123abc'}
              loading={this.state.loading} />
        </div>
        <DataGrid
          loading={this.state.loading}
          data={this.state.data}
          currentPage={this.getCurrentPage() || 1}
          getSortBy={this.getSortBy}
          onSelectLocation={this.onSelectLocation}
          selectedLocations={this.state.selectedLocations}
          onGridHeaderClick={this.onGridHeaderClick} />
      </div>
    );
  }
}

export default withApollo(DataController);
