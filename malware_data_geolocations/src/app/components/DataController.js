import _ from 'lodash';
import gql from 'graphql-tag';
import { parse } from 'qs';
import React from 'react';
import { withApollo } from 'react-apollo';

import DataGrid from './DataGrid';
import MapContainer from './MapContainer';
import { malwareData } from '../../assets/malware_data';
import Pages from './Pages';
import Search from './Search';

const ROWS_PER_PAGE = 100, DEBOUNCE_RATE = 1000;

class DataController extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      // orderedBy: {col: 'date', order: 0},
      selectedLocations: [],
      totalDataCount: 0,
    };

    this.onSelectLocation = this.onSelectLocation.bind(this);
    this.onSearchSubmit = _.debounce(this.onSearchSubmit.bind(this), DEBOUNCE_RATE);
    this.onPageClick = this.onPageClick.bind(this);
    this.getPageLimit = this.getPageLimit.bind(this);
    this.onGridHeaderClick = this.onGridHeaderClick.bind(this);
    this.setSearchValue = this.setSearchValue.bind(this);
    // this.setOrderingBy = this.setOrderingBy.bind(this);
  }

  componentDidMount() {
    // let page = parseInt(parse(window.location.search.replace('?', '')).page);
    // let searchValue = this.getSearchValue();

    if (!this.getCurrentPage()) {
      this.setCurrentPage(1);
    }
    if (!this.getSortBy()) {
      this.setSortBy('date');
    }
    if (!this.getOrd()) {
      this.setOrd('asc');
    }

    // get data
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE,
        offset: (parseInt(this.getCurrentPage() || 1) - 1) * ROWS_PER_PAGE
      }
    })
    .then((response) => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              ))
            });
          }
        })
      });
    });

    // get total data count
    this.props.client.query({
      query: gql`
        query GetCount($searchValue: String!) {
          totalCount(searchValue: $searchValue)
        }
      `,
      variables: {
        searchValue: this.getSearchValue()
      }
    })
    .then(response => {
      this.setState({
        totalDataCount: response.data.totalCount
      })
    });
  }

  onPageClick(e, currentPage, nextPage) {
    // if nextPage equals currentPage, don't do anything
    if (nextPage === currentPage)
      return;

    this.setCurrentPage(nextPage);

    // get data using offset
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE,
        offset: (nextPage - 1) * ROWS_PER_PAGE
      }
    })
    .then(response => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              )),
              selectedLocations: [],
              // orderedBy: {col: 'date', order: 0},
            });
          }
        })
      });
    });
  }

  // setOrderingBy(col, oFunc) {
  //   let order = 'asc';
  //
  //   if (this.state.orderedBy.col === col) {
  //     order = this.state.orderedBy.order ? 'asc' : 'desc';
  //   }
  //   this.setState({
  //     data: _.orderBy(this.state.data.map(data => ({
  //             ...data,
  //             selected: false,
  //           })), oFunc, order),
  //     orderedBy: {col: col, order: order === 'asc' ? 0 : 1},
  //     selectedLocations: [],
  //   });
  // }

  sortData() {
    // get data
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE,
        offset: (parseInt(this.getCurrentPage() || 1) - 1) * ROWS_PER_PAGE
      }
    })
    .then((response) => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              ))
            });
          }
        })
      });
    });
  }

  onGridHeaderClick(e) {
    switch(e.target.abbr) {
      case 'date':
        // set query string parameter for 'sortBy'
        // this.setOrderingBy('date', (o) => new Date(o.info.date.split('_')[0]));
        if (this.getSortBy() === 'date') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('date');
        }
        break;
      case 'ip':
        // this.setOrderingBy('ip', (o) => o.info.ip);
        if (this.getSortBy() === 'ip') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('ip');
        }
        break;
      case 'description':
        // this.setOrderingBy('description', (o) => o.info.description);
        if (this.getSortBy() === 'description') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('description');
        }
        break;
      case 'domain':
        // this.setOrderingBy('domain', (o) => o.info.domain);
        if (this.getSortBy() === 'domain') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('domain');
        }
        break;
      case 'asn':
        // this.setOrderingBy('asn', (o) => o.info.asn);
        if (this.getSortBy() === 'asn') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('asn');
        }
        break;
      case 'registrant':
        // this.setOrderingBy('registrant', (o) => o.info.registrant);
        if (this.getSortBy() === 'registrant') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('registrant');
        }
        break;
      case 'revlookup':
        // this.setOrderingBy('revlookup', (o) => o.info.reverse_lookup);
        if (this.getSortBy() === 'reverse_lookup') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('reverse_lookup');
        }
        break;
      case 'country':
        // this.setOrderingBy('country', (o) => o.info.country);
        if (this.getSortBy() === 'country') {
          if (this.getOrd() === 'asc') {
            this.setOrd('desc');
          } else {
            this.setOrd('asc');
          }
        } else {
          this.setSortBy('country');
        }
        break;
      default:
        break;
    }

    // call sortData to query API and retrieve sorted dataset
    this.sortData();
  }

  onSearchSubmit(searchValue) {
    // get data using search value
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $sortBy: String!, $order: String!, $first: Int!) {
          search(searchValue: $searchValue, sortBy: $sortBy, order: $order, first: $first) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: searchValue,
        sortBy: this.getSortBy() || 'date',
        order: this.getOrd() || 'asc',
        first: ROWS_PER_PAGE
      }
    })
    .then(response => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              )),
              // orderedBy: {col: 'date', order: 0},
              selectedLocations: []
            });
          }
        })
      });

      // get total data count using search value
      this.props.client.query({
        query: gql`
          query GetCount($searchValue: String!) {
            totalCount(searchValue: $searchValue)
          }
        `,
        variables: {
          searchValue: searchValue
        }
      })
      .then(response => {
        this.setState({
          totalDataCount: response.data.totalCount
        });
      });
    });
  }

  //TODO: Unit test this function
  onSelectLocation(index) {
    const selected = !this.state.data[index].selected;
    let selectedLocations = [];

    if (selected) {
      selectedLocations = [
        ...this.state.selectedLocations,
        {
          index: (index+1) + ((this.getCurrentPage() || 1) - 1) * ROWS_PER_PAGE,
          coords: {
            lat: this.state.data[index].location.lat,
            lng: this.state.data[index].location.lng
          },
          city: this.state.data[index].location.city,
          country: this.state.data[index].location.country,
          ipType: this.state.data[index].location.ipType
        }
      ];
    } else {
      selectedLocations = this.state.selectedLocations.filter(location => {
        return location.coords.lat !== this.state.data[index].location.lat && location.coords.lng !== this.state.data[index].location.lng;
      });
    }

    this.setState({
      data: this.state.data.map((data, i) => (
        {...data, selected: i === index ? selected : data.selected}
      )),
      selectedLocations: selectedLocations
    });
  }

  getPageLimit() {
    return this.state.totalDataCount ? Math.ceil(this.state.totalDataCount/ROWS_PER_PAGE) : 1;
  }

  getCurrentPage() {
    return parseInt(parse(window.location.search.replace('?', '')).page);
  }

  setCurrentPage(page) {
    const searchValue = this.getSearchValue();
    const sortBy = this.getSortBy();
    const ord = this.getOrd();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
    }
  }

  getSearchValue() {
    let searchValue = parse(window.location.search.replace('?', '')).search;
    return searchValue ? searchValue : '';
  }

  setSearchValue(searchValue) {
    const page = this.getCurrentPage();
    const sortBy = this.getSortBy();
    const ord = this.getOrd();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
    }
  }

  getSortBy() {
    return parse(window.location.search.replace('?', '')).sortBy;
  }

  setSortBy(sortBy) {
    const page = this.getCurrentPage();
    const searchValue = this.getSearchValue();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=asc&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=asc`);
    }
  }

  getOrd() {
    return parse(window.location.search.replace('?', '')).ord;
  }

  setOrd(ord) {
    const page = this.getCurrentPage();
    const sortBy = this.getSortBy();
    const searchValue = this.getSearchValue();

    if (searchValue) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
    } else {
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
    }
  }

  render() {
    return (
      <div>
        <MapContainer
          currentPage={this.getCurrentPage() || 1}
          data={this.state.data}
          selectedLocations={this.state.selectedLocations}
        />
        <Pages
          currentPage={this.getCurrentPage() || 1}
          pageLimit={this.getPageLimit()}
          onPageClick={this.onPageClick} />
        <Search
          setSearchValue={this.setSearchValue}
          onSearchSubmit={this.onSearchSubmit} />
        <DataGrid
          data={this.state.data}
          currentPage={this.getCurrentPage() || 1}
          onSelectLocation={this.onSelectLocation}
          selectedLocations={this.state.selectedLocations}
          onGridHeaderClick={this.onGridHeaderClick} />
      </div>
    );
  }
}

export default withApollo(DataController);
