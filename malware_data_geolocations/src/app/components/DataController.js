import _ from 'lodash';
import gql from 'graphql-tag';
import { parse } from 'qs';
import React from 'react';
import { withApollo } from 'react-apollo';

import DataGrid from './DataGrid';
import MapContainer from './MapContainer';
import { malwareData } from '../../assets/malware_data';
import Pages from './Pages';
import Search from './Search';

const ROWS_PER_PAGE = 100, DEBOUNCE_RATE = 1000;

class DataController extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      orderedBy: {col: 'date', order: 0},
      selectedLocations: [],
      searchValue: this.getSearchValue(),
      totalDataCount: 0,
    };

    this.onSearchValueChange = this.onSearchValueChange.bind(this);
    this.onSelectLocation = this.onSelectLocation.bind(this);
    this.onSearchSubmit = _.debounce(this.onSearchSubmit.bind(this), DEBOUNCE_RATE);
    this.onPageClick = this.onPageClick.bind(this);
    this.getPageLimit = this.getPageLimit.bind(this);
    this.clearSearch = this.clearSearch.bind(this);
    this.onGridHeaderClick = this.onGridHeaderClick.bind(this);
    this.setOrderingBy = this.setOrderingBy.bind(this);
  }

  componentDidMount() {
    let page = parseInt(parse(window.location.search.replace('?', '')).page);
    let searchValue = this.getSearchValue();

    if (!page) {
      page = 1;
      window.history.replaceState(null, null, `${window.location.pathname}?page=${page}`);
    }

    // get data
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: searchValue,
        first: ROWS_PER_PAGE,
        offset: (parseInt(page) - 1) * ROWS_PER_PAGE
      }
    })
    .then((response) => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              ))
            });
          }
        })
      });
    });

    // get total data count
    this.props.client.query({
      query: gql`
        query GetCount($searchValue: String!) {
          totalCount(searchValue: $searchValue)
        }
      `,
      variables: {
        searchValue: searchValue
      }
    })
    .then(response => {
      this.setState({
        totalDataCount: response.data.totalCount
      })
    });
  }

  onPageClick(e, currentPage, nextPage) {
    // if nextPage equals currentPage, don't do anything
    if (nextPage === currentPage)
      return;

    // get data using offset
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $first: Int!, $offset: Int!) {
          search(searchValue: $searchValue, first: $first, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: this.getSearchValue(),
        first: ROWS_PER_PAGE,
        offset: (nextPage - 1) * ROWS_PER_PAGE
      }
    })
    .then(response => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              )),
              selectedLocations: [],
              orderedBy: {col: 'date', order: 0},
            });
          }
        })
      });
    });
  }

  setOrderingBy(col, oFunc) {
    let order = 'asc';

    if (this.state.orderedBy.col === col) {
      order = this.state.orderedBy.order ? 'asc' : 'desc';
    }
    this.setState({
      data: _.orderBy(this.state.data.map(data => ({
              ...data,
              selected: false,
            })), oFunc, order),
      orderedBy: {col: col, order: order === 'asc' ? 0 : 1},
      selectedLocations: [],
    });
  }

  onGridHeaderClick(e) {
    switch(e.target.abbr) {
      case 'date':
        this.setOrderingBy('date', (o) => new Date(o.info.date.split('_')[0]));
        break;
      case 'ip':
        this.setOrderingBy('ip', (o) => o.info.ip);
        break;
      case 'description':
        this.setOrderingBy('description', (o) => o.info.description);
        break;
      case 'domain':
        this.setOrderingBy('domain', (o) => o.info.domain);
        break;
      case 'asn':
        this.setOrderingBy('asn', (o) => o.info.asn);
        break;
      case 'registrant':
        this.setOrderingBy('registrant', (o) => o.info.registrant);
        break;
      case 'revLookup':
        this.setOrderingBy('revLookup', (o) => o.info.reverse_lookup);
        break;
      case 'country':
        this.setOrderingBy('country', (o) => o.info.country);
        break;
      default:
        break;
    }
  }

  onSearchValueChange(e) {
    window.history.replaceState(null, null, `${window.location.pathname}?page=1&search=${e.target.value}`);
    this.setState({
      searchValue: e.target.value,
      selectedLocations: []
    });
    this.onSearchSubmit(e.target.value);
  }

  onSearchSubmit(searchValue) {
    // get data using search value
    this.props.client.query({
      query: gql`
        query search($searchValue: String!, $first: Int!) {
          search(searchValue: $searchValue, first: $first) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: searchValue,
        first: ROWS_PER_PAGE
      }
    })
    .then(response => {
      let locations = [];
      let count = response.data.search.length;

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType
            }
          ];
          count--;
          if (count === 0) {
            this.setState({
              data: response.data.search.map((data, index) => (
                {
                  selected: false,
                  info: data,
                  location: locations[index]
                }
              )),
              orderedBy: {col: 'date', order: 0}
            });
          }
        })
      });

      // get total data count using search value
      this.props.client.query({
        query: gql`
          query GetCount($searchValue: String!) {
            totalCount(searchValue: $searchValue)
          }
        `,
        variables: {
          searchValue: searchValue
        }
      })
      .then(response => {
        this.setState({
          totalDataCount: response.data.totalCount
        });
      });
    });
  }

  //TODO: Unit test this function
  onSelectLocation(index) {
    const selected = !this.state.data[index].selected;
    let selectedLocations = [];

    if (selected) {
      selectedLocations = [
        ...this.state.selectedLocations,
        {
          index: index+1,
          coords: {
            lat: this.state.data[index].location.lat,
            lng: this.state.data[index].location.lng
          },
          city: this.state.data[index].location.city,
          country: this.state.data[index].location.country,
          ipType: this.state.data[index].location.ipType
        }
      ];
    } else {
      selectedLocations = this.state.selectedLocations.filter(location => {
        return location.coords.lat !== this.state.data[index].location.lat && location.coords.lng !== this.state.data[index].location.lng;
      });
    }

    this.setState({
      data: this.state.data.map((data, i) => (
        {...data, selected: i === index ? selected : data.selected}
      )),
      selectedLocations: selectedLocations
    });
  }

  clearSearch() {
    const searchValue = parse(window.location.search.replace('?', '')).search;
    if (searchValue && searchValue.length > 0) {
      window.history.replaceState(null, null, `${window.location.pathname}?page=1`);
      this.setState({
        searchValue: '',
        selectedLocations: []
      });
      this.onSearchSubmit('');
    }
  }

  getCurrentPage() {
    let page = parseInt(parse(window.location.search.replace('?', '')).page);
    return page ? page : 1;
  }

  getPageLimit() {
    return this.state.totalDataCount ? Math.ceil(this.state.totalDataCount/ROWS_PER_PAGE) : 1;
  }

  getSearchValue() {
    let search = parse(window.location.search.replace('?', '')).search;
    return search ? search : '';
  }

  render() {
    return (
      <div>
        <MapContainer
          currentPage={this.getCurrentPage()}
          data={this.state.data}
          selectedLocations={this.state.selectedLocations} />
        <Pages
          currentPage={this.getCurrentPage()}
          pageLimit={this.getPageLimit()}
          onPageClick={this.onPageClick} />
        <Search
          clearSearch={this.clearSearch}
          searchValue={this.state.searchValue}
          onSearchValueChange={this.onSearchValueChange} />
        <DataGrid
          data={this.state.data}
          currentPage={this.getCurrentPage()}
          onSelectLocation={this.onSelectLocation}
          selectedLocations={this.state.selectedLocations}
          onGridHeaderClick={this.onGridHeaderClick} />
      </div>
    );
  }
}

export default withApollo(DataController);
