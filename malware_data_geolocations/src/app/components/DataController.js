import gql from 'graphql-tag';
import React from 'react';
import { withApollo } from 'react-apollo';

import DataGrid from './DataGrid';
import MapContainer from './MapContainer';
import { malwareData } from '../../assets/malware_data';
import Pages from './Pages';

class DataController extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      locations: [],
      selectedLocations: [],
      filterValue: '',
      searchResults: [],
      searchClicked: false,
      totalDataCount: 0,
      currentPage: 1,
    };

    this.onFilterValueChange = this.onFilterValueChange.bind(this);
    this.onSelectLocation = this.onSelectLocation.bind(this);
    this.onSearchSubmit = this.onSearchSubmit.bind(this);
    this.onPageClick = this.onPageClick.bind(this);
  }

  componentDidMount() {
    // get data
    this.props.client.query({
      query: gql`
        query GetData {
          getData(first: 100, offset: 0) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `
    })
    .then((response) => {
      this.setState({
        data: response.data.getData
      });

      response.data.getData.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          this.setState({
            locations: [
              ...this.state.locations,
              {
                lat: json.lat,
                lng: json.lon
              }
            ]
          })
        })
      });
    });

    // get total data count
    this.props.client.query({
      query: gql`
        query GetCount {
          totalCount
        }
      `
    })
    .then(response => {
      this.setState({
        totalDataCount: response.data.totalCount
      })
    });
  }

  onFilterValueChange(e) {
    this.setState({
      filterValue: e.target.value,
      searchClicked: false
    });
  }

  onPageClick(e, currentPage, nextPage) {
    // if nextPage equals currentPage, don't do anything
    if (nextPage === currentPage)
      return;

    //TODO: Check if searchClicked is true:
      // If true: Query server for next page of data using search Query
      // If false: Query server for next page of all data

    this.setState({
      currentPage: nextPage
    });

    e.currentTarget.children[currentPage].classList.remove('active');
    e.currentTarget.children[nextPage].classList.add('active');

    // retrieve data using page offset
    this.props.client.query({
      query: gql`
        query GetData($offset: Int!) {
          getData(first: 100, offset: $offset) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        offset: (nextPage-1)*100
      }
    })
    .then((response) => {
      this.setState({
        data: response.data.getData,
        locations: []
      });

      response.data.getData.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          this.setState({
            locations: [
              ...this.state.locations,
              {
                lat: json.lat,
                lng: json.lon
              }
            ]
          })
        })
      });
    });
  }

  onSearchSubmit(searchValue) {
    if (!searchValue)
      return;
      
    this.setState({
      searchClicked: true
    });

    // get data using search value
    this.props.client.query({
      query: gql`
        query search($searchValue: String!) {
          search(searchValue: $searchValue, first: 100) {
            date,
            ip,
            description,
            domain,
            asn,
            country,
            registrant,
            reverse_lookup
          }
        }
      `,
      variables: {
        searchValue: searchValue
      }
    })
    .then(response => {
      this.setState({
        data: response.data.search,
        currentPage: 1,
        locations: []
      });

      // get total data count using search value
      this.props.client.query({
        query: gql`
          query GetCount($searchValue: String!) {
            totalCount(searchValue: $searchValue)
          }
        `,
        variables: {
          searchValue: searchValue
        }
      })
      .then(response => {
        this.setState({
          totalDataCount: response.data.totalCount
        });
      });

      response.data.search.map(data => {
        fetch(`https://www.extreme-ip-lookup.com/json/${data.ip}`)
        .then(response => response.json())
        .then(json => {
          this.setState({
            locations: [
              ...this.state.locations,
              {
                lat: json.lat,
                lng: json.lon
              }
            ]
          })
        })
      });
    });
  }

  //TODO: Unit test this function
  onSelectLocation(e, index) {
    if (e.currentTarget.classList.contains('table-danger')) {
      e.currentTarget.classList.remove('table-danger');

      this.setState({
        selectedLocations: this.state.selectedLocations.filter(location => {
          return location.coords !== this.state.locations[index];
        })
      })
    } else {
      e.currentTarget.classList.add('table-danger');

      this.setState({
        selectedLocations: [
          ...this.state.selectedLocations,
          {
            index: index+1,
            coords: this.state.locations[index]
          }
        ]
      });
    }
  }

  render() {
    return (
      <div>
        <MapContainer
          currentPage={this.state.currentPage}
          locations={this.state.selectedLocations.length > 0 ? this.state.selectedLocations : this.state.locations} />
        <Pages
          currentPage={this.state.currentPage}
          pageLimit={Math.ceil(this.state.totalDataCount/100) ? Math.ceil(this.state.totalDataCount/100) : 1}
          onPageClick={this.onPageClick} />
        <DataGrid
          data={this.state.data}
          currentPage={this.state.currentPage}
          filterValue={this.state.filterValue}
          onFilterValueChange={this.onFilterValueChange}
          onSelectLocation={this.onSelectLocation}
          onSearchSubmit={this.onSearchSubmit} />
      </div>
    );
  }
}

export default withApollo(DataController);
