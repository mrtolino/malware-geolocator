import debounce from 'lodash/debounce';
import PropTypes from 'prop-types';
import React from 'react';
import { withApollo } from 'react-apollo';
import ReactPaginate from 'react-paginate';
import { GridLoader } from 'react-spinners';
import DataGrid from './DataGrid';
import MapContainer from './MapContainer';
import Search from './Search';
import {
  getCurrentPage,
  setCurrentPage,
  getSearchValue,
  getSortBy,
  setSortBy,
  getOrd,
  setOrd,
} from '../util/qs_manipulation';
import {
  searchQuery,
  countQuery,
} from '../util/queries';


export const ROWS_PER_PAGE = 25;
const DEBOUNCE_RATE_SEARCH_SUBMIT = 1000;
const DEBOUNCE_RATE_PAGE_CLICK = 500;

class DataController extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      selectedLocations: [],
      totalDataCount: 0,
      loading: true,
      error: false,
    };

    this.onSelectLocation = this.onSelectLocation.bind(this);
    this.onSearchSubmit = debounce(this.onSearchSubmit.bind(this), DEBOUNCE_RATE_SEARCH_SUBMIT);
    this.onPageClick = debounce(this.onPageClick.bind(this), DEBOUNCE_RATE_PAGE_CLICK);
    this.getPageLimit = this.getPageLimit.bind(this);
    this.onGridHeaderClick = this.onGridHeaderClick.bind(this);
  }

  componentDidMount() {
    if (!getCurrentPage() || getCurrentPage() === 'undefined') {
      setCurrentPage(1);
    }
    if (!getSortBy() || getSortBy() === 'undefined') {
      setSortBy('date');
    }
    if (!getOrd() || getOrd() === 'undefined') {
      setOrd('asc');
    }

    // get data
    this.props.client.query(searchQuery(
      getSearchValue(),
      getSortBy() || 'id',
      getOrd() || 'asc', ROWS_PER_PAGE,
      (parseInt(getCurrentPage() || 1, 10) - 1) * ROWS_PER_PAGE,
    ))
      .then((response, error) => {
        let locations = [];
        let count;

        if (response.data.search && response.data.search.length > 0) {
          this.fetchLocations(response.data.search);

          // get total data count
          this.props.client.query(countQuery(getSearchValue()))
            .then((response) => {
              this.setState({
                totalDataCount: response.data.totalCount,
                loading: false,
              });
            });
        } else {
          this.setState({
            data: [],
            selectedLocations: [],
            totalDataCount: 0,
            loading: false,
          });
        }
      })
      .catch(error => {
        if (error) {
          this.setState({
            error: true,
            loading: false,
          });
        }
      });
  }

  onPageClick(page) {
    // pull next page value out of object and convert to 1-based indexing
    const nextPage = page.selected + 1;

    setCurrentPage(nextPage);

    this.setState({
      loading: true,
    });

    // get data using offset
    this.props.client.query(searchQuery(
      getSearchValue(),
      getSortBy() || 'id',
      getOrd() || 'asc',
      ROWS_PER_PAGE,
      (nextPage - 1) * ROWS_PER_PAGE,
    ))
      .then((response) => {
        let locations = [];
        let count;

        if (response.data.search && response.data.search.length > 0) {
          this.fetchLocations(response.data.search);
        } else {
          this.setState({
            data: [],
            selectedLocations: [],
            totalDataCount: 0,
            loading: false,
          });
        }
      });
  }

  sortData() {
    this.setState({
      loading: true,
    });

    // get data
    this.props.client.query(searchQuery(
      getSearchValue(),
      getSortBy() || 'id',
      getOrd() || 'asc',
      ROWS_PER_PAGE,
      (parseInt(getCurrentPage() || 1, 10) - 1) * ROWS_PER_PAGE,
    ))
      .then((response) => {
        let locations = [];
        let count;

        if (response.data.search && response.data.search.length > 0) {
          this.fetchLocations(response.data.search);
        } else {
          this.setState({
            data: [],
            selectedLocations: [],
            totalDataCount: 0,
            loading: false,
          });
        }
      });
  }

  setOrderingBy(col) {
    if (getSortBy() === col) {
      if (getOrd() === 'asc') {
        setOrd('desc');
      } else {
        setOrd('asc');
      }
    } else {
      setSortBy(col);
    }
  }

  onGridHeaderClick(col) {
    switch (col) {
      case 'id':
        this.setOrderingBy('id');
        break;
      case 'date':
        this.setOrderingBy('date');
        break;
      case 'ip':
        this.setOrderingBy('ip');
        break;
      case 'description':
        this.setOrderingBy('description');
        break;
      case 'domain':
        this.setOrderingBy('domain');
        break;
      case 'asn':
        this.setOrderingBy('asn');
        break;
      case 'registrant':
        this.setOrderingBy('registrant');
        break;
      case 'revlookup':
        this.setOrderingBy('reverse_lookup');
        break;
      case 'country':
        this.setOrderingBy('country');
        break;
      default:
        break;
    }

    // call sortData to query API and retrieve sorted dataset
    this.sortData();
  }

  fetchLocations(data) {
    let locations = [];
    let count = data.length;

    data.map(info => (
      fetch(`https://www.extreme-ip-lookup.com/json/${info.ip}`)
        .then(response => response.json())
        .then((json) => {
          locations = [
            ...locations,
            {
              lat: json.lat,
              lng: json.lon,
              city: json.city,
              country: json.country,
              ipType: json.ipType,
            },
          ];
          count -= 1;
          if (count === 0) {
            this.setState({
              data: data.map((info, index) => (
                {
                  selected: false,
                  info: info,
                  location: locations[index],
                }
              )),
              selectedLocations: [],
              loading: false,
            });
          }
        })
        .catch(error => {
          this.setState({
            error: true,
            loading: false,
          });
        })
    ));
  }

  onSearchSubmit(searchValue) {
    setCurrentPage(1);

    this.setState({
      loading: true,
    });

    // get data using search value
    this.props.client.query(searchQuery(
      searchValue,
      getSortBy() || 'id',
      getOrd() || 'asc',
      ROWS_PER_PAGE,
      0,
    ))
      .then((response) => {
        let locations = [];
        let count;

        if (response.data.search && response.data.search.length > 0) {
          this.fetchLocations(response.data.search);

          // get total data count using search value
          this.props.client.query(countQuery(searchValue))
            .then((response) => {
              this.setState({
                totalDataCount: response.data.totalCount,
                loading: false,
              });
            });
        } else {
          this.setState({
            data: [],
            selectedLocations: [],
            totalDataCount: 0,
            loading: false,
          });
        }
      });
  }

  onSelectLocation(index) {
    const selected = !this.state.data[index].selected;
    let selectedLocations = [];

    if (selected) {
      selectedLocations = [
        ...this.state.selectedLocations,
        {
          index: this.state.data[index].info.id,
          coords: {
            lat: this.state.data[index].location.lat,
            lng: this.state.data[index].location.lng,
          },
          city: this.state.data[index].location.city,
          country: this.state.data[index].location.country,
          ipType: this.state.data[index].location.ipType,
        },
      ];
    } else {
      selectedLocations =
        this.state.selectedLocations.filter(location =>
          location.coords.lat !== this.state.data[index].location.lat &&
          location.coords.lng !== this.state.data[index].location.lng);
    }

    this.setState({
      data: this.state.data.map((data, i) => (
        { ...data, selected: i === index ? selected : data.selected }
      )),
      selectedLocations,
    });
  }

  getPageLimit() {
    return this.state.totalDataCount ? Math.ceil(this.state.totalDataCount / ROWS_PER_PAGE) : 1;
  }

  renderDataGrid() {
    if (!this.state.error) {
      return <DataGrid
        loading={this.state.loading}
        data={this.state.data}
        currentPage={getCurrentPage() || 1}
        onSelectLocation={this.onSelectLocation}
        selectedLocations={this.state.selectedLocations}
        onGridHeaderClick={this.onGridHeaderClick}
      />;
    } else {
      return <h3 className="text-center">Sorry about that, looks like there is a network issue. Please try again!</h3>;
    }
  }

  render() {
    return (
      <div>
        <MapContainer
          currentPage={getCurrentPage() || 1}
          data={this.state.data}
          selectedLocations={this.state.selectedLocations}
        />
        <ReactPaginate
          containerClassName="row pagination justify-content-center justify-content-md-start row-margin-top-20"
          pageClassName="page-item"
          pageLinkClassName="page-link"
          previousClassName="page-link"
          nextClassName="page-link"
          activeClassName="active"
          disabledClassName="disabled"
          breakClassName="page-link"
          breakLabel="..."
          pageCount={this.getPageLimit()}
          pageRangeDisplayed={3}
          marginPagesDisplayed={3}
          initialPage={(getCurrentPage() || 1) - 1}
          forcePage={(getCurrentPage() || 1) - 1}
          onPageChange={this.onPageClick}
        />
        <Search
          onSearchSubmit={this.onSearchSubmit}
        />
        <div id="spinner" className="row justify-content-center">
          <GridLoader
            color="#e51010"
            loading={this.state.loading}
          />
        </div>
        {this.renderDataGrid()}
      </div>
    );
  }
}

DataController.propTypes = {
  client: PropTypes.object.isRequired,
};

export default withApollo(DataController);
