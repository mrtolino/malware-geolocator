import { parse } from 'qs';

// mock window object
let window = {
  location: {
    search: '',
    // href: '',
    pathname: '/',
    origin: 'http://localhost:8080'
  },
  history: {
    replaceState: (arg1, arg2, queryString) => {
      // window.location.href = window.location.origin + queryString;
      window.location.search = queryString.replace('/', '');
    }
  }
};

// copying functions here, in order to use the mock window object
const getCurrentPage = () => parseInt(parse(window.location.search.replace('?', '')).page);
const setCurrentPage = (page) => {
  const searchValue = getSearchValue();
  const sortBy = getSortBy() || 'date';
  const ord = getOrd() || 'asc';

  if (searchValue) {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
  } else {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
  }
};
const getSearchValue = () => {
  const searchValue = parse(window.location.search.replace('?', '')).search;
  return searchValue || '';
};
const setSearchValue = (searchValue) => {
  const page = getCurrentPage() || 1;
  const sortBy = getSortBy() || 'date';
  const ord = getOrd() || 'asc';

  if (searchValue) {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
  } else {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
  }
};
const getSortBy = () => parse(window.location.search.replace('?', '')).sortBy;
const setSortBy = (sortBy) => {
  const page = getCurrentPage() || 1;
  const searchValue = getSearchValue() || '';

  if (searchValue) {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=asc&search=${searchValue}`);
  } else {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=asc`);
  }
};
const getOrd = () => parse(window.location.search.replace('?', '')).ord;
const setOrd = (ord) => {
  const page = getCurrentPage() || 1;
  const sortBy = getSortBy() || 'date';
  const searchValue = getSearchValue() || '';

  if (searchValue) {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}&search=${searchValue}`);
  } else {
    window.history.replaceState(null, null, `${window.location.pathname}?page=${page}&sortBy=${sortBy}&ord=${ord}`);
  }
};

// TESTS

const testQueryStrings = {
  page1: `?page=1`,
  sortByIP: `?sortBy=ip`,
  ordAsc: `?ord=asc`,
  trojanSearch: `?search=trojan`,
  initialTestString: `?page=10&sortBy=date&ord=asc`,
  initialStringSetCurrentPage: `?page=1&sortBy=ip&ord=desc`,
  getCurrentPage1: `?page=1&sortBy=date&ord=asc`,
  getCurrentPage2: `?sortBy=date&ord=desc&search=trojan&page=10`,
  getSearchValue1: `?page=1&sortBy=date&ord=asc&search=trojan`,
  getSearchValue2: `?page=1&sortBy=ip&ord=desc&search=exploit`,
  getSortBy1: `?page=1&sortBy=description&ord=asc&search=t`,
  getSortBy2: `?page=10&sortBy=ip&ord=desc&search=a`,
  getOrd1: `?page=5&sortBy=ip&ord=asc&search=p`,
  getOrd2: `?page=2&sortBy=description&ord=desc&search=q`,
  setCurrentPage1: `?page=20&sortBy=date&ord=asc`,
  setCurrentPage2: `?page=20&sortBy=ip&ord=desc`,
  setSearchValue1: `?page=1&sortBy=date&ord=asc&search=exploit`,
  setSearchValue2: `?page=10&sortBy=date&ord=asc&search=exploit`,
  setSortBy1: `?page=1&sortBy=description&ord=asc`,
  setSortBy2: `?page=10&sortBy=description&ord=asc`,
  setOrd1: `?page=1&sortBy=date&ord=desc`,
  setOrd2: `?page=10&sortBy=date&ord=desc`,
};

// testing return value types of getters
test('getCurrentPage should return a number, given a query string containing a page', () => {
  window.location.search = testQueryStrings['page1'];
  expect(typeof getCurrentPage()).toBe('number');
});

test('getSearchValue should return a string, given a query string containing a search value', () => {
  window.location.search = testQueryStrings['trojanSearch'];
  expect(typeof getSearchValue()).toBe('string');
});

test('getSortBy should return a string, given a query string containing a sortBy', () => {
  window.location.search = testQueryStrings['sortByIP'];
  expect(typeof getSortBy()).toBe('string');
});

test('getOrd should return a string, given a query string containing an ord', () => {
  window.location.search = testQueryStrings['ordAsc'];
  expect(typeof getOrd()).toBe('string');
});

// testing actual results of getters and setters
test('getCurrentPage should return 1, given the search string page1', () => {
  window.location.search = testQueryStrings['page1'];

  expect(getCurrentPage()).toBe(1);
});

test('getCurrentPage should return 1, given the search string getCurrentPage1', () => {
  window.location.search = testQueryStrings['getCurrentPage1'];

  expect(getCurrentPage()).toBe(1);
});

test('getCurrentPage should return 10, given the search string getCurrentPage2', () => {
  window.location.search = testQueryStrings['getCurrentPage2'];

  expect(getCurrentPage()).toBe(10);
});

test('getSortBy should return description, given search string getSortBy1', () => {
  window.location.search = testQueryStrings['getSortBy1'];

  expect(getSortBy()).toBe('description');
});

test('getSortBy should return ip, given search string getSortBy2', () => {
  window.location.search = testQueryStrings['getSortBy2'];

  expect(getSortBy()).toBe('ip');
});

test('getOrd should return asc, given search string getOrd1', () => {
  window.location.search = testQueryStrings['getOrd1'];

  expect(getOrd()).toBe('asc');
});

test('getOrd should return desc, given search string getOrd2', () => {
  window.location.search = testQueryStrings['getOrd2'];

  expect(getOrd()).toBe('desc');
});

test('getSearchValue should return trojan, given search string getSearchValue1', () => {
  window.location.search = testQueryStrings['getSearchValue1'];

  expect(getSearchValue()).toBe('trojan');
});

test('getSearchValue should return exploit, given search string getSearchValue2', () => {
  window.location.search = testQueryStrings['getSearchValue2'];

  expect(getSearchValue()).toBe('exploit');
});

test('setCurrentPage (given 20) should set search string to setCurrentPage1', () => {
  window.location.search = '';
  setCurrentPage(20);

  expect(window.location.search).toBe(testQueryStrings['setCurrentPage1']);
});

test('setCurrentPage (given 20) should set search string to setCurrentPage2, when initial string is initialStringSetCurrentPage', () => {
  window.location.search = testQueryStrings['initialStringSetCurrentPage'];
  setCurrentPage(20);

  expect(window.location.search).toBe(testQueryStrings['setCurrentPage2']);
});

test('getSearchValue should return an empty string given the string page1', () => {
  window.location.search = testQueryStrings['page1'];
  expect(getSearchValue()).toBe('');
});

test('getSearchValue should return trojan given the string trojanSearch', () => {
  window.location.search = testQueryStrings['trojanSearch'];
  expect(getSearchValue()).toBe('trojan');
});

test('setSearchValue (given exploit) should set search string to setSearchValue1', () => {
  window.location.search = '';
  setSearchValue('exploit');

  expect(window.location.search).toBe(testQueryStrings['setSearchValue1']);
});

test('setSearchValue (given exploit) should set search string to setSearchValue2, when initial string is initialTestString', () => {
  window.location.search = testQueryStrings['initialTestString'];
  setSearchValue('exploit');

  expect(window.location.search).toBe(testQueryStrings['setSearchValue2']);
});

test('getSortBy should return undefined given string page1', () => {
  window.location.search = testQueryStrings['page1'];
  expect(getSortBy()).toBe(undefined);
});

test('getSortBy should return ip given string sortByIP', () => {
  window.location.search = testQueryStrings['sortByIP'];
  expect(getSortBy()).toBe('ip');
});

test('setSortBy (given description) should set search string to string setSortBy1', () => {
  window.location.search = '';
  setSortBy('description');

  expect(window.location.search).toBe(testQueryStrings['setSortBy1']);
});

test('setSortBy (given description) should set search string to string setSortBy2, when initial string is initialTestString', () => {
  window.location.search = testQueryStrings['initialTestString'];
  setSortBy('description');

  expect(window.location.search).toBe(testQueryStrings['setSortBy2']);
});

test('getOrd should return asc given string ordAsc', () => {
  window.location.search = testQueryStrings['ordAsc'];
  expect(getOrd()).toBe('asc');
});

test('setOrd (given desc) should set search string to string setOrd1', () => {
  window.location.search = '';
  setOrd('desc');

  expect(window.location.search).toBe(testQueryStrings['setOrd1']);
});

test('setOrd (given desc) should set search string to string setOrd2, when initial string is initialTestString', () => {
  window.location.search = testQueryStrings['initialTestString'];
  setOrd('desc');

  expect(window.location.search).toBe(testQueryStrings['setOrd2']);
});
